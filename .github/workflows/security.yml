name: üîí Security Audit

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security audit daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - deep

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # === DEPENDENCY VULNERABILITY SCAN ===
  dependency-scan:
    name: üì¶ Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci --prefer-offline

      - name: üîç Run npm audit
        run: |
          echo "## Dependency Audit Report" > audit-report.md
          echo "Generated: $(date)" >> audit-report.md
          echo "" >> audit-report.md
          
          # Run audit and capture output
          npm audit --json > npm-audit.json || true
          npm audit >> audit-report.md || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
          
          echo "High vulnerabilities: $HIGH_VULNS" >> audit-report.md
          echo "Critical vulnerabilities: $CRITICAL_VULNS" >> audit-report.md
          
          # Fail if critical vulnerabilities found
          if [ "$CRITICAL_VULNS" -gt "0" ]; then
            echo "‚ùå Critical vulnerabilities found!"
            exit 1
          fi

      - name: üîç Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true

      - name: üì§ Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-results
          path: |
            audit-report.md
            npm-audit.json
            snyk-results.json
          retention-days: 30

      - name: üö® Create security issue if critical vulns found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Critical Security Vulnerabilities Found',
              body: `Critical security vulnerabilities were found in dependencies.
              
              **Scan Date:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run:** [View Results](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              Please review and update dependencies immediately.`,
              labels: ['security', 'critical', 'dependencies']
            })

  # === STATIC APPLICATION SECURITY TESTING (SAST) ===
  sast-scan:
    name: üîç Static Code Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/nodejs
            p/javascript
            p/xss
            p/sql-injection
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: üîç ESLint Security Plugin
        run: |
          npx eslint . \
            --ext .js \
            --config .eslintrc.security.js \
            --format json \
            --output-file eslint-security.json || true

      - name: üîç NodeJSScan Security Analysis
        uses: ajinabraham/njsscan-action@master
        with:
          args: '.'

      - name: üìä Security scan summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Semgrep SAST completed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ ESLint security rules applied" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ NodeJSScan analysis completed" >> $GITHUB_STEP_SUMMARY

  # === SECRET SCANNING ===
  secret-scan:
    name: üîê Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîê TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified --max-depth=50
        continue-on-error: true

      - name: üîê GitGuardian Secret Scan
        uses: GitGuardian/ggshield/actions/secret@main
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.repository.default_branch }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        continue-on-error: true

      - name: üîç Manual secret patterns
        run: |
          echo "Scanning for common secret patterns..."
          
          # Check for potential secrets (non-exhaustive)
          FINDINGS=0
          
          # API keys
          if grep -r "api[_-]key\s*=" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è Potential API key found"
            FINDINGS=$((FINDINGS + 1))
          fi
          
          # Database URLs
          if grep -r "mongodb://" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è Potential database URL found"
            FINDINGS=$((FINDINGS + 1))
          fi
          
          # AWS credentials
          if grep -r "AKIA[0-9A-Z]{16}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è Potential AWS access key found"
            FINDINGS=$((FINDINGS + 1))
          fi
          
          # Private keys
          if grep -r "BEGIN.*PRIVATE KEY" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è Potential private key found"
            FINDINGS=$((FINDINGS + 1))
          fi
          
          echo "Secret scan findings: $FINDINGS"

  # === AUTHENTICATION & AUTHORIZATION TESTING ===
  auth-security-test:
    name: üîë Authentication Security Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci --prefer-offline

      - name: ‚öôÔ∏è Setup test environment
        run: |
          cp .env.example .env
          echo "AUTH_TOKEN=$(openssl rand -hex 32)" >> .env
          echo "NODE_ENV=test" >> .env

      - name: üîÑ Start server for security testing
        run: |
          npm start &
          sleep 10
        env:
          PORT: 3002

      - name: üîë Test authentication bypass attempts
        run: |
          echo "Testing authentication security..."
          
          # Test without token
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3002/api/render)
          if [ "$RESPONSE" != "401" ]; then
            echo "‚ùå Authentication bypass possible - expected 401, got $RESPONSE"
            exit 1
          fi
          
          # Test with invalid token
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer invalid_token" \
            http://localhost:3002/api/render)
          if [ "$RESPONSE" != "401" ]; then
            echo "‚ùå Invalid token accepted - expected 401, got $RESPONSE"
            exit 1
          fi
          
          # Test timing attack resistance
          echo "Testing timing attack resistance..."
          for i in {1..10}; do
            TIME1=$(curl -s -o /dev/null -w "%{time_total}" \
              -H "Authorization: Bearer wrong_token_$i" \
              http://localhost:3002/api/health)
            echo "Request $i time: $TIME1"
          done
          
          echo "‚úÖ Authentication security tests passed"

      - name: üîç Test for information disclosure
        run: |
          echo "Testing information disclosure..."
          
          # Check error messages don't reveal sensitive info
          ERROR_RESPONSE=$(curl -s http://localhost:3002/api/render \
            -H "Content-Type: application/json" \
            -d '{"url": "invalid"}')
          
          if echo "$ERROR_RESPONSE" | grep -q "AUTH_TOKEN\|password\|secret"; then
            echo "‚ùå Error response contains sensitive information"
            echo "$ERROR_RESPONSE"
            exit 1
          fi
          
          echo "‚úÖ Information disclosure tests passed"

  # === DOCKER SECURITY SCAN ===
  docker-security:
    name: üê≥ Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ÔøΩ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci --prefer-offline

      - name: üîß Build Docker image for scanning
        run: |
          docker build -f Dockerfile.simple -t headlessx:security-scan .

      - name: üîç Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'headlessx:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üì§ Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üîç Docker bench security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security || true

  # === DEPENDENCY LICENSE CHECK ===
  license-check:
    name: üìÑ License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci --prefer-offline

      - name: üìÑ License compatibility check
        run: |
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' || true
          npx license-checker --json > licenses.json

      - name: üìÑ Check for GPL licenses
        run: |
          if npx license-checker --summary | grep -i "GPL"; then
            echo "‚ùå GPL license detected - may not be compatible with MIT"
            npx license-checker | grep -A5 -B5 GPL
            exit 1
          fi
          echo "‚úÖ No GPL licenses found"

      - name: üì§ Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 30

  # === SECURITY REPORTING ===
  security-report:
    name: üìä Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, auth-security-test, docker-security, license-check]
    if: always()
    timeout-minutes: 10

    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: üìä Generate security summary
        run: |
          echo "# üîí Security Audit Summary" > security-summary.md
          echo "**Date:** $(date)" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## üìã Scan Results" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-summary.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- Auth Security Test: ${{ needs.auth-security-test.result }}" >> security-summary.md
          echo "- Docker Security: ${{ needs.docker-security.result }}" >> security-summary.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # Overall status
          if [ "${{ needs.dependency-scan.result }}" = "success" ] && \
             [ "${{ needs.sast-scan.result }}" = "success" ] && \
             [ "${{ needs.secret-scan.result }}" = "success" ] && \
             [ "${{ needs.auth-security-test.result }}" = "success" ]; then
            echo "## ‚úÖ Overall Status: PASSED" >> security-summary.md
            echo "No critical security issues found." >> security-summary.md
          else
            echo "## ‚ùå Overall Status: ATTENTION REQUIRED" >> security-summary.md
            echo "Some security scans failed or found issues. Please review." >> security-summary.md
          fi

      - name: üì§ Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

      - name: üìã Add to step summary
        run: cat security-summary.md >> $GITHUB_STEP_SUMMARY

  # === CRITICAL SECURITY ALERT ===
  security-alert:
    name: üö® Critical Security Alert
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, auth-security-test]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')

    steps:
      - name: üö® Log critical security alert
        run: |
          echo "üö® CRITICAL SECURITY ALERT üö®"
          echo "Security scans have failed. Please check the workflow logs."
          echo "Failed jobs: ${{ toJson(needs) }}"
              
              Security vulnerabilities have been detected that require immediate attention.
              
              **Detection Date:** ${new Date().toISOString()}
              **Branch:** ${context.ref}
              **Commit:** ${context.sha}
              **Workflow Run:** [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ## Failed Security Checks
              - Dependency Scan: ${{ needs.dependency-scan.result }}
              - SAST Scan: ${{ needs.sast-scan.result }}
              - Auth Security Test: ${{ needs.auth-security-test.result }}
              
              ## Immediate Actions Required
              1. Review security scan results in the workflow run
              2. Update vulnerable dependencies immediately
              3. Fix any identified security issues
              4. Re-run security scans to verify fixes
              
              **Do not deploy until all security issues are resolved.**`,
              labels: ['security', 'critical', 'urgent']
            })